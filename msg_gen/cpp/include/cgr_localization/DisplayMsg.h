/* Auto-generated by genmsg_cpp for file /home/nando/workspace/ros/fuerte_workspace/sandbox/cgr_localization/msg/DisplayMsg.msg */
#ifndef CGR_LOCALIZATION_MESSAGE_DISPLAYMSG_H
#define CGR_LOCALIZATION_MESSAGE_DISPLAYMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cgr_localization
{
template <class ContainerAllocator>
struct DisplayMsg_ {
  typedef DisplayMsg_<ContainerAllocator> Type;

  DisplayMsg_()
  : timestamp(0.0)
  , robotLocX(0.0)
  , robotLocY(0.0)
  , robotAngle(0.0)
  , windowSize(0.0)
  , lines_p1x()
  , lines_p1y()
  , lines_p2x()
  , lines_p2y()
  , lines_col()
  , points_x()
  , points_y()
  , points_col()
  , circles_x()
  , circles_y()
  , circles_col()
  {
  }

  DisplayMsg_(const ContainerAllocator& _alloc)
  : timestamp(0.0)
  , robotLocX(0.0)
  , robotLocY(0.0)
  , robotAngle(0.0)
  , windowSize(0.0)
  , lines_p1x(_alloc)
  , lines_p1y(_alloc)
  , lines_p2x(_alloc)
  , lines_p2y(_alloc)
  , lines_col(_alloc)
  , points_x(_alloc)
  , points_y(_alloc)
  , points_col(_alloc)
  , circles_x(_alloc)
  , circles_y(_alloc)
  , circles_col(_alloc)
  {
  }

  typedef double _timestamp_type;
  double timestamp;

  typedef double _robotLocX_type;
  double robotLocX;

  typedef double _robotLocY_type;
  double robotLocY;

  typedef double _robotAngle_type;
  double robotAngle;

  typedef double _windowSize_type;
  double windowSize;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _lines_p1x_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  lines_p1x;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _lines_p1y_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  lines_p1y;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _lines_p2x_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  lines_p2x;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _lines_p2y_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  lines_p2y;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _lines_col_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  lines_col;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _points_x_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  points_x;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _points_y_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  points_y;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _points_col_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  points_col;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _circles_x_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  circles_x;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _circles_y_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  circles_y;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _circles_col_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  circles_col;


  typedef boost::shared_ptr< ::cgr_localization::DisplayMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cgr_localization::DisplayMsg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DisplayMsg
typedef  ::cgr_localization::DisplayMsg_<std::allocator<void> > DisplayMsg;

typedef boost::shared_ptr< ::cgr_localization::DisplayMsg> DisplayMsgPtr;
typedef boost::shared_ptr< ::cgr_localization::DisplayMsg const> DisplayMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cgr_localization::DisplayMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cgr_localization::DisplayMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cgr_localization

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cgr_localization::DisplayMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cgr_localization::DisplayMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cgr_localization::DisplayMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "20f2e94b57c956606f1d7505b08c9d10";
  }

  static const char* value(const  ::cgr_localization::DisplayMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x20f2e94b57c95660ULL;
  static const uint64_t static_value2 = 0x6f1d7505b08c9d10ULL;
};

template<class ContainerAllocator>
struct DataType< ::cgr_localization::DisplayMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cgr_localization/DisplayMsg";
  }

  static const char* value(const  ::cgr_localization::DisplayMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cgr_localization::DisplayMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 timestamp\n\
\n\
float64 robotLocX\n\
float64 robotLocY\n\
float64 robotAngle\n\
\n\
float64 windowSize\n\
\n\
float32[] lines_p1x\n\
float32[] lines_p1y\n\
float32[] lines_p2x\n\
float32[] lines_p2y\n\
uint32[]   lines_col\n\
\n\
float32[] points_x\n\
float32[] points_y\n\
uint32[]   points_col\n\
\n\
float32[] circles_x\n\
float32[] circles_y\n\
uint32[]   circles_col\n\
\n\
";
  }

  static const char* value(const  ::cgr_localization::DisplayMsg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cgr_localization::DisplayMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timestamp);
    stream.next(m.robotLocX);
    stream.next(m.robotLocY);
    stream.next(m.robotAngle);
    stream.next(m.windowSize);
    stream.next(m.lines_p1x);
    stream.next(m.lines_p1y);
    stream.next(m.lines_p2x);
    stream.next(m.lines_p2y);
    stream.next(m.lines_col);
    stream.next(m.points_x);
    stream.next(m.points_y);
    stream.next(m.points_col);
    stream.next(m.circles_x);
    stream.next(m.circles_y);
    stream.next(m.circles_col);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DisplayMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cgr_localization::DisplayMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cgr_localization::DisplayMsg_<ContainerAllocator> & v) 
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "robotLocX: ";
    Printer<double>::stream(s, indent + "  ", v.robotLocX);
    s << indent << "robotLocY: ";
    Printer<double>::stream(s, indent + "  ", v.robotLocY);
    s << indent << "robotAngle: ";
    Printer<double>::stream(s, indent + "  ", v.robotAngle);
    s << indent << "windowSize: ";
    Printer<double>::stream(s, indent + "  ", v.windowSize);
    s << indent << "lines_p1x[]" << std::endl;
    for (size_t i = 0; i < v.lines_p1x.size(); ++i)
    {
      s << indent << "  lines_p1x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.lines_p1x[i]);
    }
    s << indent << "lines_p1y[]" << std::endl;
    for (size_t i = 0; i < v.lines_p1y.size(); ++i)
    {
      s << indent << "  lines_p1y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.lines_p1y[i]);
    }
    s << indent << "lines_p2x[]" << std::endl;
    for (size_t i = 0; i < v.lines_p2x.size(); ++i)
    {
      s << indent << "  lines_p2x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.lines_p2x[i]);
    }
    s << indent << "lines_p2y[]" << std::endl;
    for (size_t i = 0; i < v.lines_p2y.size(); ++i)
    {
      s << indent << "  lines_p2y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.lines_p2y[i]);
    }
    s << indent << "lines_col[]" << std::endl;
    for (size_t i = 0; i < v.lines_col.size(); ++i)
    {
      s << indent << "  lines_col[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.lines_col[i]);
    }
    s << indent << "points_x[]" << std::endl;
    for (size_t i = 0; i < v.points_x.size(); ++i)
    {
      s << indent << "  points_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.points_x[i]);
    }
    s << indent << "points_y[]" << std::endl;
    for (size_t i = 0; i < v.points_y.size(); ++i)
    {
      s << indent << "  points_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.points_y[i]);
    }
    s << indent << "points_col[]" << std::endl;
    for (size_t i = 0; i < v.points_col.size(); ++i)
    {
      s << indent << "  points_col[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.points_col[i]);
    }
    s << indent << "circles_x[]" << std::endl;
    for (size_t i = 0; i < v.circles_x.size(); ++i)
    {
      s << indent << "  circles_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.circles_x[i]);
    }
    s << indent << "circles_y[]" << std::endl;
    for (size_t i = 0; i < v.circles_y.size(); ++i)
    {
      s << indent << "  circles_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.circles_y[i]);
    }
    s << indent << "circles_col[]" << std::endl;
    for (size_t i = 0; i < v.circles_col.size(); ++i)
    {
      s << indent << "  circles_col[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.circles_col[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CGR_LOCALIZATION_MESSAGE_DISPLAYMSG_H

