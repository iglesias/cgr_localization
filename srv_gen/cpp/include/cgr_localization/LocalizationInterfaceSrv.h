/* Auto-generated by genmsg_cpp for file /home/nando/workspace/ros/fuerte_workspace/sandbox/cgr_localization/srv/LocalizationInterfaceSrv.srv */
#ifndef CGR_LOCALIZATION_SERVICE_LOCALIZATIONINTERFACESRV_H
#define CGR_LOCALIZATION_SERVICE_LOCALIZATIONINTERFACESRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace cgr_localization
{
template <class ContainerAllocator>
struct LocalizationInterfaceSrvRequest_ {
  typedef LocalizationInterfaceSrvRequest_<ContainerAllocator> Type;

  LocalizationInterfaceSrvRequest_()
  : loc_x(0.0)
  , loc_y(0.0)
  , orientation(0.0)
  , map()
  {
  }

  LocalizationInterfaceSrvRequest_(const ContainerAllocator& _alloc)
  : loc_x(0.0)
  , loc_y(0.0)
  , orientation(0.0)
  , map(_alloc)
  {
  }

  typedef float _loc_x_type;
  float loc_x;

  typedef float _loc_y_type;
  float loc_y;

  typedef float _orientation_type;
  float orientation;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  map;


  typedef boost::shared_ptr< ::cgr_localization::LocalizationInterfaceSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cgr_localization::LocalizationInterfaceSrvRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LocalizationInterfaceSrvRequest
typedef  ::cgr_localization::LocalizationInterfaceSrvRequest_<std::allocator<void> > LocalizationInterfaceSrvRequest;

typedef boost::shared_ptr< ::cgr_localization::LocalizationInterfaceSrvRequest> LocalizationInterfaceSrvRequestPtr;
typedef boost::shared_ptr< ::cgr_localization::LocalizationInterfaceSrvRequest const> LocalizationInterfaceSrvRequestConstPtr;


template <class ContainerAllocator>
struct LocalizationInterfaceSrvResponse_ {
  typedef LocalizationInterfaceSrvResponse_<ContainerAllocator> Type;

  LocalizationInterfaceSrvResponse_()
  : loc_x(0.0)
  , loc_y(0.0)
  , orientation(0.0)
  {
  }

  LocalizationInterfaceSrvResponse_(const ContainerAllocator& _alloc)
  : loc_x(0.0)
  , loc_y(0.0)
  , orientation(0.0)
  {
  }

  typedef float _loc_x_type;
  float loc_x;

  typedef float _loc_y_type;
  float loc_y;

  typedef float _orientation_type;
  float orientation;


  typedef boost::shared_ptr< ::cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LocalizationInterfaceSrvResponse
typedef  ::cgr_localization::LocalizationInterfaceSrvResponse_<std::allocator<void> > LocalizationInterfaceSrvResponse;

typedef boost::shared_ptr< ::cgr_localization::LocalizationInterfaceSrvResponse> LocalizationInterfaceSrvResponsePtr;
typedef boost::shared_ptr< ::cgr_localization::LocalizationInterfaceSrvResponse const> LocalizationInterfaceSrvResponseConstPtr;

struct LocalizationInterfaceSrv
{

typedef LocalizationInterfaceSrvRequest Request;
typedef LocalizationInterfaceSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct LocalizationInterfaceSrv
} // namespace cgr_localization

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cgr_localization::LocalizationInterfaceSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cgr_localization::LocalizationInterfaceSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cgr_localization::LocalizationInterfaceSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2ceaebd9cb848e7bc40a33bc0eec2cf4";
  }

  static const char* value(const  ::cgr_localization::LocalizationInterfaceSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2ceaebd9cb848e7bULL;
  static const uint64_t static_value2 = 0xc40a33bc0eec2cf4ULL;
};

template<class ContainerAllocator>
struct DataType< ::cgr_localization::LocalizationInterfaceSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cgr_localization/LocalizationInterfaceSrvRequest";
  }

  static const char* value(const  ::cgr_localization::LocalizationInterfaceSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cgr_localization::LocalizationInterfaceSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 loc_x\n\
float32 loc_y\n\
float32 orientation\n\
string map\n\
\n\
\n\
";
  }

  static const char* value(const  ::cgr_localization::LocalizationInterfaceSrvRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d026719f68bb9c5550cfad15e8b7c86c";
  }

  static const char* value(const  ::cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd026719f68bb9c55ULL;
  static const uint64_t static_value2 = 0x50cfad15e8b7c86cULL;
};

template<class ContainerAllocator>
struct DataType< ::cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cgr_localization/LocalizationInterfaceSrvResponse";
  }

  static const char* value(const  ::cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float32 loc_x\n\
float32 loc_y\n\
float32 orientation\n\
\n\
\n\
";
  }

  static const char* value(const  ::cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cgr_localization::LocalizationInterfaceSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.loc_x);
    stream.next(m.loc_y);
    stream.next(m.orientation);
    stream.next(m.map);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LocalizationInterfaceSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.loc_x);
    stream.next(m.loc_y);
    stream.next(m.orientation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LocalizationInterfaceSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cgr_localization::LocalizationInterfaceSrv> {
  static const char* value() 
  {
    return "a0134c4275a788c78e585db0543085bb";
  }

  static const char* value(const cgr_localization::LocalizationInterfaceSrv&) { return value(); } 
};

template<>
struct DataType<cgr_localization::LocalizationInterfaceSrv> {
  static const char* value() 
  {
    return "cgr_localization/LocalizationInterfaceSrv";
  }

  static const char* value(const cgr_localization::LocalizationInterfaceSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cgr_localization::LocalizationInterfaceSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a0134c4275a788c78e585db0543085bb";
  }

  static const char* value(const cgr_localization::LocalizationInterfaceSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cgr_localization::LocalizationInterfaceSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cgr_localization/LocalizationInterfaceSrv";
  }

  static const char* value(const cgr_localization::LocalizationInterfaceSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a0134c4275a788c78e585db0543085bb";
  }

  static const char* value(const cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cgr_localization/LocalizationInterfaceSrv";
  }

  static const char* value(const cgr_localization::LocalizationInterfaceSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CGR_LOCALIZATION_SERVICE_LOCALIZATIONINTERFACESRV_H

